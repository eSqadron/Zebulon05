@startuml

title Robot ROS Leg


class RobotLegRosWrapper{
  +RobotLegRosWrapper()
  -void cur_pos_callback(const maestro_interfaces::msg::CurrentPositions& msg)
  -void step_callback(const geometry_msgs::msg::Point& msg)
  -rclcpp::Publisher<maestro_interfaces::msg::MaestroTarget>::SharedPtr publisher_
  -rclcpp::Publisher<std_msgs::msg::Bool>::SharedPtr step_done_feedback_
  -rclcpp::Subscription<maestro_interfaces::msg::CurrentPositions>::SharedPtr subscription_
  -rclcpp::Subscription<geometry_msgs::msg::Point>::SharedPtr step_subscription_
  -size_t count_
  -RobotLegRos robo_leg
  
}

class RobotLegRos{
  +RobotLegRos(Publisher<>::SharedPtr pub_message_ptr, 
                std::array<short unsigned int, 3> servo_ids)
  +RobotLegRos()
  +void set_publisher(Publisher<>::SharedPtr pub_message_ptr)
  +void set_servo_ids(std::array<short unsigned int, 3> new_servo_ids)
  +std::array<short unsigned int, 3> get_servo_ids()
  +void set_physical_params(int h1, int a1, int a2, int a3)
  +void move_leg_xyz(float x, float y, float z)
  +void publish_servo_position(std::array<short unsigned int, 3> new_servo_pos)
  +std::array<float, 3> forward_kinematics(const std::array<float, 3> angles_deg)
  +std::array<float, 3> inverse_kinematics(const std::array<float, 3> xyz_pos)
  +save_last_known_servo_positions(std::array<short unsigned int, 24> new_last_known_pos)
  +std::array<short unsigned int, 3> get_servo_movement_target()
  +std::array<short unsigned int, 24> get_last_known_servo_pos()
  -Publisher<>::SharedPtr pub_message_ptr_
  
}



RobotLegRosWrapper "1" *-down- "1" RobotLegRos 
RobotLegRosWrapper <|-up- rclcpp::Node

@enduml